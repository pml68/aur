#!/bin/bash

_help() {
  echo "Usage: $(basename "$0") [OPTIONS]"
  echo ""
  echo "Options:"
  echo "  <pkg1 pkg2 ...>         Download and install/update the specified packages."
  echo "  -g, --git               Updates all packages, including -git packages."
  echo "  -c, --config <file>     Parse the specified config file and install/update"
  echo "                          packages listed in it (one per line)."
  echo "  -f, --force             Reinstall all packages, even if they are up-to-date."
  echo "  -l, --list              List currently installed packages."
  echo "  -h, --help              Display this help text."
  echo "  [nothing]               Check all packages for updates."
  echo ""
  exit "$1"
}

_update() {
  for dir in ~/.aur/*; do
    cd "$dir" || continue

    if [[ $(git pull) != "Already up to date." ]] || [[ $1 == "-f" ]] || [[ "$dir" == *-git && $1 == "-g" ]]; then
      git diff "@{1}.."
      read -p "Proceed with installation? [Y/n] " proceed
      if [[ -z "$proceed" ]] || [[ "$proceed" == "Y" ]] || [[ "$proceed" == "y" ]]; then
        makepkg -si ; _clean
      fi
    fi
  done
}

_clean() {
  git clean -ffxd
  git restore .
}

_update_or_install() {
  for package in "$@"; do
    if cd ~/.aur/"$package"; then
      local proceed=""

      if [[ $(git pull) != "Already up to date." ]]; then
        git diff "@{1}.."
        read -p "Proceed with installation? [Y/n] " proceed
      fi

      if [[ -z "$proceed" ]] || [[ "$proceed" == "Y" ]] || [[ "$proceed" == "y" ]]; then
        makepkg -si ; _clean
      fi
    else
      git clone "https://aur.archlinux.org/$package" ~/.aur/"$package"
      cd ~/.aur/"$package" || continue
      ${EDITOR:-nvim} PKGBUILD
      read -p "Proceed with installation? [Y/n] " proceed
      if [[ -z "$proceed" ]] || [[ "$proceed" == "Y" ]] || [[ "$proceed" == "y" ]]; then
        makepkg -si ; _clean
      fi
    fi
  done
}

if [[ -n $1 ]]; then
  case $1 in
    --list | -l)
      pacman -Qm
      ;;
    --force | -f)
      _update -f
      ;;
    --config | -c)
      packages=$(tr '\n' ' ' < "$2")
      _update_or_install "$packages"
      ;;
    --git | -g)
      _update -g
      ;;
    --help | -h)
      _help 0
      ;;
    -*)
      echo "Unknown option: $1"
      echo ""
      _help 16
      ;;
    *)
      _update_or_install "$@"
      ;;
  esac
else
  _update
fi
